webpackJsonp([2],{

/***/ 27:
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(28);


/***/ }),

/***/ 28:
/***/ (function(module, exports) {

eval("var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n(function ($, Popper, moment) {\n  'use strict';\n\n  var DATE_FORMAT = 'YYYY-MM-DD';\n  var COLUMN_WIDTH = 60;\n\n  var Selection = Backbone.Model.extend({\n    defaults: {\n      unit: null,\n      endDate: null,\n      startDate: null\n    },\n\n    clearSelectedDate: function clearSelectedDate(newUnit) {\n      this.set({ startDate: null, endDate: null });\n      this.set('unit', newUnit);\n    },\n    getNights: function getNights() {\n      if (!this.has('endDate') || !this.has('startDate')) {\n        return 0;\n      }\n\n      return this.get('endDate').diff(this.get('startDate'), 'days');\n    }\n  });\n\n  var ScheduleCalendar = Backbone.View.extend({\n    options: {\n      debug: true,\n      marker: '.awebooking-schedule__marker',\n      popper: '.awebooking-schedule_popper'\n    },\n\n    events: {\n      'click .awebooking-schedule__day': 'setSelectionDate',\n      'mouseenter .awebooking-schedule__day': 'drawMarkerOnHover'\n    },\n\n    initialize: function initialize() {\n      this.model = new Selection();\n\n      this.$marker = this.$el.find(this.options.marker);\n      this.$marker.hide();\n\n      this.$popper = this.$el.find(this.options.popper);\n      this.$popper.hide();\n\n      this.popper = new Popper(this.$marker, this.$popper, {\n        placement: 'bottom',\n        modifiers: {\n          flip: { enabled: false },\n          hide: { enabled: false },\n          preventOverflow: { enabled: false }\n        }\n      });\n\n      $(document).on('keyup', this.keyup.bind(this));\n      // $(document).off('keyup', this.keyup);\n\n      this.listenTo(this.model, 'change:startDate change:endDate', this.setMarkerPosition);\n\n      if (this.options.debug) {\n        this.listenTo(this.model, 'change', this.debug);\n      }\n\n      this.$el.data('schedule-calendar', this);\n    },\n    debug: function debug() {\n      if (this.model.has('startDate') && this.model.has('endDate')) {\n        console.log(this.model.get('calendar'), this.model.get('startDate').format(DATE_FORMAT) + ' - ' + this.model.get('endDate').format(DATE_FORMAT));\n      } else if (this.model.has('startDate')) {\n        console.log(this.model.get('calendar'), this.model.get('startDate').format(DATE_FORMAT) + ' - null');\n      } else if (this.model.has('endDate')) {\n        console.log(this.model.get('calendar'), 'null' + ' - ' + this.model.get('endDate').format(DATE_FORMAT));\n      }\n    },\n    keyup: function keyup(e) {\n      if (e.keyCode == 27) {\n        this.model.clearSelectedDate();\n        this.$popper.hide();\n      }\n    },\n    setSelectionDate: function setSelectionDate(e) {\n      var $target = $(e.currentTarget);\n      var setUnit = this.getUnitByElement($target);\n      var clickDate = moment($target.data('date'));\n\n      console.log(e);\n\n      if (this.model.has('calendar') && setUnit !== this.model.get('calendar') || this.model.has('startDate') && this.model.has('endDate') || this.model.has('startDate') && clickDate.isBefore(this.model.get('startDate'), 'day')) {\n        this.model.clearSelectedDate(setUnit);\n        this.$popper.hide();\n      }\n\n      if (!this.model.has('startDate') && !this.model.has('endDate')) {\n        this.model.set('calendar', setUnit);\n        this.model.set('startDate', clickDate.clone());\n      } else {\n        this.model.set('endDate', clickDate.clone());\n\n        this.$popper.show();\n        this.popper.update();\n\n        this.trigger('apply', this.model, this);\n      }\n    },\n    setMarkerPosition: function setMarkerPosition() {\n      var endDate = this.model.get('endDate');\n      var startDate = this.model.get('startDate');\n\n      if (_.isNull(startDate) && _.isNull(endDate)) {\n        this.$marker.css('width', 60).hide();\n        return;\n      }\n\n      var $startDateEl = this.getElementByDate(this.model.get('calendar'), startDate);\n      if (_.isNull(endDate)) {\n        var position = this.getCellPossiton($startDateEl);\n        this.$marker.show().css({ top: position.top, left: position.left });\n      } else {\n        var $endDateEl = this.getElementByDate(this.model.get('calendar'), endDate);\n        this.$marker.css('width', ($endDateEl.index() - $startDateEl.index() + 1) * 60);\n      }\n    },\n    drawMarkerOnHover: function drawMarkerOnHover(e) {\n      var $target = $(e.currentTarget);\n      var targetUnit = this.getUnitByElement($target);\n\n      if (!this.model.has('calendar') || this.model.get('calendar') !== targetUnit || !this.model.has('startDate') || this.model.has('startDate') && this.model.has('endDate')) {\n        return;\n      }\n\n      var hoverDate = moment($target.data('date'));\n      var startDate = this.model.get('startDate');\n\n      if (startDate.isSameOrBefore(hoverDate, 'day')) {\n        var $startDateEl = this.getElementByDate(targetUnit, startDate);\n        var nights = $target.index() - $startDateEl.index() + 1;\n\n        this.$marker.css('width', nights * COLUMN_WIDTH);\n        this.$marker.find('span').text(nights);\n      }\n    },\n    getElementByDate: function getElementByDate(calendar, date) {\n      if ((typeof date === 'undefined' ? 'undefined' : _typeof(date)) === 'object') {\n        date = date.format(DATE_FORMAT);\n      }\n\n      return this.$el.find('[data-calendar=\"' + calendar + '\"]').find('.awebooking-schedule__day[data-date=\"' + date + '\"]');\n    },\n    getUnitByElement: function getUnitByElement(element) {\n      var calendar = $(element).data('calendar');\n\n      if (typeof calendar === 'undefined') {\n        calendar = $(element).closest('[data-calendar]').data('calendar');\n      }\n\n      calendar = parseInt(calendar, 10);\n      return !isNaN(calendar) ? calendar : 0;\n    },\n    getCellPossiton: function getCellPossiton(element) {\n      var childPos = element.offset();\n      var parentPos = this.$el.find('.awebooking-schedule__body').offset();\n\n      return {\n        top: childPos.top - parentPos.top,\n        left: childPos.left - parentPos.left\n      };\n    }\n  });\n\n  new ScheduleCalendar({\n    el: '.awebooking-schedule'\n  });\n})(jQuery, TheAweBooking.Popper, TheAweBooking.momment || window.moment);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///28\n");

/***/ })

},[27]);