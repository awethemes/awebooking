{"version":3,"names":[],"mappings":"","sources":["admin/settings-taxes.js"],"sourcesContent":["(function($, plugin) {\r\n  // 'use strict';\r\n\r\n/* global htmlSettingsTaxLocalizeScript, ajaxurl */\r\n\r\n/**\r\n * Used by woocommerce/includes/admin/settings/views/html-settings-tax.php\r\n */\r\n( function( $, data, wp, ajaxurl ) {\r\n  $( function() {\r\n\r\n    if ( ! String.prototype.trim ) {\r\n      String.prototype.trim = function () {\r\n        return this.replace( /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '' );\r\n      };\r\n    }\r\n\r\n    var rowTemplate        = wp.template( 'wc-tax-table-row' ),\r\n      rowTemplateEmpty   = wp.template( 'wc-tax-table-row-empty' ),\r\n      paginationTemplate = wp.template( 'wc-tax-table-pagination' ),\r\n      $table             = $( '.wc_tax_rates' ),\r\n      $tbody             = $( '#rates' ),\r\n      $save_button       = $( ':input[name=\"save\"]' ),\r\n      $pagination        = $( '#rates-pagination' ),\r\n      $search_field      = $( '#rates-search .wc-tax-rates-search-field' ),\r\n      $submit            = $( '.submit .button-primary[type=submit]' ),\r\n      WCTaxTableModelConstructor = Backbone.Model.extend({\r\n        changes: {},\r\n        setRateAttribute: function( rateID, attribute, value ) {\r\n          var rates   = _.indexBy( this.get( 'rates' ), 'tax_rate_id' ),\r\n            changes = {};\r\n\r\n          if ( rates[ rateID ][ attribute ] !== value ) {\r\n            changes[ rateID ] = {};\r\n            changes[ rateID ][ attribute ] = value;\r\n            rates[ rateID ][ attribute ]   = value;\r\n          }\r\n\r\n          this.logChanges( changes );\r\n        },\r\n        logChanges: function( changedRows ) {\r\n          var changes = this.changes || {};\r\n\r\n          _.each( changedRows, function( row, id ) {\r\n            changes[ id ] = _.extend( changes[ id ] || {\r\n              tax_rate_id : id\r\n            }, row );\r\n          } );\r\n\r\n          this.changes = changes;\r\n          this.trigger( 'change:rates' );\r\n        },\r\n        getFilteredRates: function() {\r\n          var rates  = this.get( 'rates' ),\r\n            search = $search_field.val().toLowerCase();\r\n\r\n          if ( search.length ) {\r\n            rates = _.filter( rates, function( rate ) {\r\n              var search_text = _.toArray( rate ).join( ' ' ).toLowerCase();\r\n              return ( -1 !== search_text.indexOf( search ) );\r\n            } );\r\n          }\r\n\r\n          rates = _.sortBy( rates, function( rate ) {\r\n            return parseInt( rate.tax_rate_order, 10 );\r\n          } );\r\n\r\n          return rates;\r\n        },\r\n        block: function() {\r\n          $( '.wc_tax_rates' ).block({\r\n            message: null,\r\n            overlayCSS: {\r\n              background: '#fff',\r\n              opacity: 0.6\r\n            }\r\n          });\r\n        },\r\n        unblock: function() {\r\n          $( '.wc_tax_rates' ).unblock();\r\n        },\r\n        save: function() {\r\n          var self = this;\r\n\r\n          self.block();\r\n\r\n          Backbone.ajax({\r\n            method: 'POST',\r\n            dataType: 'json',\r\n            url: ajaxurl + ( ajaxurl.indexOf( '?' ) > 0 ? '&' : '?' ) + 'action=woocommerce_tax_rates_save_changes',\r\n            data: {\r\n              current_class: data.current_class,\r\n              wc_tax_nonce: data.wc_tax_nonce,\r\n              changes: self.changes\r\n            },\r\n            success: function( response, textStatus ) {\r\n              if ( 'success' === textStatus && response.success ) {\r\n                WCTaxTableModelInstance.set( 'rates', response.data.rates );\r\n                WCTaxTableModelInstance.trigger( 'change:rates' );\r\n\r\n                WCTaxTableModelInstance.changes = {};\r\n                WCTaxTableModelInstance.trigger( 'saved:rates' );\r\n\r\n                // Reload view.\r\n                WCTaxTableInstance.render();\r\n              }\r\n\r\n              self.unblock();\r\n            }\r\n          });\r\n        }\r\n      } ),\r\n      WCTaxTableViewConstructor = Backbone.View.extend({\r\n        rowTemplate: rowTemplate,\r\n        per_page: data.limit,\r\n        page: data.page,\r\n        initialize: function() {\r\n          var qty_pages = Math.ceil( _.toArray( this.model.get( 'rates' ) ).length / this.per_page );\r\n\r\n          this.qty_pages = 0 === qty_pages ? 1 : qty_pages;\r\n          this.page = this.sanitizePage( data.page );\r\n\r\n          this.listenTo( this.model, 'change:rates', this.setUnloadConfirmation );\r\n          this.listenTo( this.model, 'saved:rates', this.clearUnloadConfirmation );\r\n          $tbody.on( 'change autocompletechange', ':input', { view: this }, this.updateModelOnChange );\r\n          $search_field.on( 'keyup search', { view: this }, this.onSearchField );\r\n          $pagination.on( 'click', 'a', { view: this }, this.onPageChange );\r\n          $pagination.on( 'change', 'input', { view: this }, this.onPageChange );\r\n          $( window ).on( 'beforeunload', { view: this }, this.unloadConfirmation );\r\n          $submit.on( 'click', { view: this }, this.onSubmit );\r\n          $save_button.prop( 'disabled', true );\r\n\r\n          // Can bind these directly to the buttons, as they won't get overwritten.\r\n          $table.find( '.insert' ).on( 'click', { view: this }, this.onAddNewRow );\r\n          $table.find( '.remove_tax_rates' ).on( 'click', { view: this }, this.onDeleteRow );\r\n          $table.find( '.export' ).on( 'click', { view: this }, this.onExport );\r\n        },\r\n        render: function() {\r\n          var rates       = this.model.getFilteredRates(),\r\n            qty_rates   = _.size( rates ),\r\n            qty_pages   = Math.ceil( qty_rates / this.per_page ),\r\n            first_index = 0 === qty_rates ? 0 : this.per_page * ( this.page - 1 ),\r\n            last_index  = this.per_page * this.page,\r\n            paged_rates = _.toArray( rates ).slice( first_index, last_index ),\r\n            view        = this;\r\n\r\n          // Blank out the contents.\r\n          this.$el.empty();\r\n\r\n          if ( paged_rates.length ) {\r\n            // Populate $tbody with the current page of results.\r\n            $.each( paged_rates, function( id, rowData ) {\r\n              view.$el.append( view.rowTemplate( rowData ) );\r\n            } );\r\n          } else {\r\n            view.$el.append( rowTemplateEmpty() );\r\n          }\r\n\r\n          // Initialize autocomplete for countries.\r\n          this.$el.find( 'td.country input' ).autocomplete({\r\n            source: data.countries,\r\n            minLength: 2\r\n          });\r\n\r\n          // Initialize autocomplete for states.\r\n          this.$el.find( 'td.state input' ).autocomplete({\r\n            source: data.states,\r\n            minLength: 3\r\n          });\r\n\r\n          // Postcode and city don't have `name` values by default. They're only created if the contents changes, to save on database queries (I think)\r\n          this.$el.find( 'td.postcode input, td.city input' ).change( function() {\r\n            $( this ).attr( 'name', $( this ).data( 'name' ) );\r\n          });\r\n\r\n          if ( qty_pages > 1 ) {\r\n            // We've now displayed our initial page, time to render the pagination box.\r\n            $pagination.html( paginationTemplate( {\r\n              qty_rates:    qty_rates,\r\n              current_page: this.page,\r\n              qty_pages:    qty_pages\r\n            } ) );\r\n          } else {\r\n            $pagination.empty();\r\n            view.page = 1;\r\n          }\r\n        },\r\n        updateUrl: function() {\r\n          if ( ! window.history.replaceState ) {\r\n            return;\r\n          }\r\n\r\n          var url    = data.base_url,\r\n            search = $search_field.val();\r\n\r\n          if ( 1 < this.page ) {\r\n            url += '&p=' + encodeURIComponent( this.page );\r\n          }\r\n\r\n          if ( search.length ) {\r\n            url += '&s=' + encodeURIComponent( search );\r\n          }\r\n\r\n          window.history.replaceState( {}, '', url );\r\n        },\r\n        onSubmit: function( event ) {\r\n          event.data.view.model.save();\r\n          event.preventDefault();\r\n        },\r\n        onAddNewRow: function( event ) {\r\n          var view    = event.data.view,\r\n            model   = view.model,\r\n            rates   = _.indexBy( model.get( 'rates' ), 'tax_rate_id' ),\r\n            changes = {},\r\n            size    = _.size( rates ),\r\n            newRow  = _.extend( {}, data.default_rate, {\r\n              tax_rate_id: 'new-' + size + '-' + Date.now(),\r\n              newRow:      true\r\n            } ),\r\n            $current, current_id, current_order, rates_to_reorder, reordered_rates;\r\n\r\n          $current = $tbody.children( '.current' );\r\n\r\n          if ( $current.length ) {\r\n            current_id            = $current.last().data( 'id' );\r\n            current_order         = parseInt( rates[ current_id ].tax_rate_order, 10 );\r\n            newRow.tax_rate_order = 1 + current_order;\r\n\r\n            rates_to_reorder = _.filter( rates, function( rate ) {\r\n              if ( parseInt( rate.tax_rate_order, 10 ) > current_order ) {\r\n                return true;\r\n              }\r\n              return false;\r\n            } );\r\n\r\n            reordered_rates = _.map( rates_to_reorder, function( rate ) {\r\n              rate.tax_rate_order++;\r\n              changes[ rate.tax_rate_id ] = _.extend( changes[ rate.tax_rate_id ] || {}, { tax_rate_order : rate.tax_rate_order } );\r\n              return rate;\r\n            } );\r\n          } else {\r\n            newRow.tax_rate_order = 1 + _.max(\r\n              _.pluck( rates, 'tax_rate_order' ),\r\n              function ( val ) {\r\n                // Cast them all to integers, because strings compare funky. Sighhh.\r\n                return parseInt( val, 10 );\r\n              }\r\n            );\r\n            // Move the last page\r\n            view.page = view.qty_pages;\r\n          }\r\n\r\n          rates[ newRow.tax_rate_id ]   = newRow;\r\n          changes[ newRow.tax_rate_id ] = newRow;\r\n\r\n          model.set( 'rates', rates );\r\n          model.logChanges( changes );\r\n\r\n          view.render();\r\n        },\r\n        onDeleteRow: function( event ) {\r\n          var view    = event.data.view,\r\n            model   = view.model,\r\n            rates   = _.indexBy( model.get( 'rates' ), 'tax_rate_id' ),\r\n            changes = {},\r\n            $current, current_id;\r\n\r\n          event.preventDefault();\r\n\r\n          if ( $current = $tbody.children( '.current' ) ) {\r\n            $current.each(function(){\r\n              current_id    = $( this ).data('id');\r\n\r\n              delete rates[ current_id ];\r\n\r\n              changes[ current_id ] = _.extend( changes[ current_id ] || {}, { deleted : 'deleted' } );\r\n            });\r\n\r\n            model.set( 'rates', rates );\r\n            model.logChanges( changes );\r\n\r\n            view.render();\r\n          } else {\r\n            window.alert( data.strings.no_rows_selected );\r\n          }\r\n        },\r\n        onSearchField: function( event ){\r\n          event.data.view.updateUrl();\r\n          event.data.view.render();\r\n        },\r\n        onPageChange: function( event ) {\r\n          var $target  = $( event.currentTarget );\r\n\r\n          event.preventDefault();\r\n          event.data.view.page = $target.data( 'goto' ) ? $target.data( 'goto' ) : $target.val();\r\n          event.data.view.render();\r\n          event.data.view.updateUrl();\r\n        },\r\n        onExport: function( event ) {\r\n          var csv_data = 'data:application/csv;charset=utf-8,' + data.strings.csv_data_cols.join(',') + '\\n';\r\n\r\n          $.each( event.data.view.model.getFilteredRates(), function( id, rowData ) {\r\n            var row = '';\r\n\r\n            row += rowData.tax_rate_country  + ',';\r\n            row += rowData.tax_rate_state    + ',';\r\n            row += ( rowData.postcode        ? rowData.postcode.join( '; ' ) : '' ) + ',';\r\n            row += ( rowData.city            ? rowData.city.join( '; ' )     : '' ) + ',';\r\n            row += rowData.tax_rate          + ',';\r\n            row += rowData.tax_rate_name     + ',';\r\n            row += rowData.tax_rate_priority + ',';\r\n            row += rowData.tax_rate_compound + ',';\r\n            row += rowData.tax_rate_shipping + ',';\r\n            row += data.current_class;\r\n\r\n            csv_data += row + '\\n';\r\n          });\r\n\r\n          $( this ).attr( 'href', encodeURI( csv_data ) );\r\n\r\n          return true;\r\n        },\r\n        setUnloadConfirmation: function() {\r\n          this.needsUnloadConfirm = true;\r\n          $save_button.prop( 'disabled', false );\r\n        },\r\n        clearUnloadConfirmation: function() {\r\n          this.needsUnloadConfirm = false;\r\n          $save_button.prop( 'disabled', true );\r\n        },\r\n        unloadConfirmation: function( event ) {\r\n          if ( event.data.view.needsUnloadConfirm ) {\r\n            event.returnValue = data.strings.unload_confirmation_msg;\r\n            window.event.returnValue = data.strings.unload_confirmation_msg;\r\n            return data.strings.unload_confirmation_msg;\r\n          }\r\n        },\r\n        updateModelOnChange: function( event ) {\r\n          var model     = event.data.view.model,\r\n            $target   = $( event.target ),\r\n            id        = $target.closest( 'tr' ).data( 'id' ),\r\n            attribute = $target.data( 'attribute' ),\r\n            val       = $target.val();\r\n\r\n          if ( 'city' === attribute || 'postcode' === attribute ) {\r\n            val = val.split( ';' );\r\n            val = $.map( val, function( thing ) {\r\n              return thing.trim();\r\n            });\r\n          }\r\n\r\n          if ( 'tax_rate_compound' === attribute || 'tax_rate_shipping' === attribute ) {\r\n            if ( $target.is( ':checked' ) ) {\r\n              val = 1;\r\n            } else {\r\n              val = 0;\r\n            }\r\n          }\r\n\r\n          model.setRateAttribute( id, attribute, val );\r\n        },\r\n        sanitizePage: function( page_num ) {\r\n          page_num = parseInt( page_num, 10 );\r\n          if ( page_num < 1 ) {\r\n            page_num = 1;\r\n          } else if ( page_num > this.qty_pages ) {\r\n            page_num = this.qty_pages;\r\n          }\r\n          return page_num;\r\n        }\r\n      } ),\r\n      WCTaxTableModelInstance = new WCTaxTableModelConstructor({\r\n        rates: data.rates\r\n      } ),\r\n      WCTaxTableInstance = new WCTaxTableViewConstructor({\r\n        model:    WCTaxTableModelInstance,\r\n        el:       '#rates'\r\n      } );\r\n\r\n    WCTaxTableInstance.render();\r\n\r\n  });\r\n})( jQuery, htmlSettingsTaxLocalizeScript, wp, ajaxurl );\r\n\r\n\r\n})(jQuery, window.awebooking);\r\n"],"file":"settings-taxes.js"}