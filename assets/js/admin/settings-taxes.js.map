{"version":3,"names":[],"mappings":"","sources":["admin/settings-taxes.js"],"sourcesContent":["(function($, plugin) {\n  // 'use strict';\n\n/* global htmlSettingsTaxLocalizeScript, ajaxurl */\n\n/**\n * Used by woocommerce/includes/admin/settings/views/html-settings-tax.php\n */\n( function( $, data, wp, ajaxurl ) {\n  $( function() {\n\n    if ( ! String.prototype.trim ) {\n      String.prototype.trim = function () {\n        return this.replace( /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '' );\n      };\n    }\n\n    var rowTemplate        = wp.template( 'wc-tax-table-row' ),\n      rowTemplateEmpty   = wp.template( 'wc-tax-table-row-empty' ),\n      paginationTemplate = wp.template( 'wc-tax-table-pagination' ),\n      $table             = $( '.wc_tax_rates' ),\n      $tbody             = $( '#rates' ),\n      $save_button       = $( ':input[name=\"save\"]' ),\n      $pagination        = $( '#rates-pagination' ),\n      $search_field      = $( '#rates-search .wc-tax-rates-search-field' ),\n      $submit            = $( '.submit .button-primary[type=submit]' ),\n      WCTaxTableModelConstructor = Backbone.Model.extend({\n        changes: {},\n        setRateAttribute: function( rateID, attribute, value ) {\n          var rates   = _.indexBy( this.get( 'rates' ), 'tax_rate_id' ),\n            changes = {};\n\n          if ( rates[ rateID ][ attribute ] !== value ) {\n            changes[ rateID ] = {};\n            changes[ rateID ][ attribute ] = value;\n            rates[ rateID ][ attribute ]   = value;\n          }\n\n          this.logChanges( changes );\n        },\n        logChanges: function( changedRows ) {\n          var changes = this.changes || {};\n\n          _.each( changedRows, function( row, id ) {\n            changes[ id ] = _.extend( changes[ id ] || {\n              tax_rate_id : id\n            }, row );\n          } );\n\n          this.changes = changes;\n          this.trigger( 'change:rates' );\n        },\n        getFilteredRates: function() {\n          var rates  = this.get( 'rates' ),\n            search = $search_field.val().toLowerCase();\n\n          if ( search.length ) {\n            rates = _.filter( rates, function( rate ) {\n              var search_text = _.toArray( rate ).join( ' ' ).toLowerCase();\n              return ( -1 !== search_text.indexOf( search ) );\n            } );\n          }\n\n          rates = _.sortBy( rates, function( rate ) {\n            return parseInt( rate.tax_rate_order, 10 );\n          } );\n\n          return rates;\n        },\n        block: function() {\n          $( '.wc_tax_rates' ).block({\n            message: null,\n            overlayCSS: {\n              background: '#fff',\n              opacity: 0.6\n            }\n          });\n        },\n        unblock: function() {\n          $( '.wc_tax_rates' ).unblock();\n        },\n        save: function() {\n          var self = this;\n\n          self.block();\n\n          Backbone.ajax({\n            method: 'POST',\n            dataType: 'json',\n            url: ajaxurl + ( ajaxurl.indexOf( '?' ) > 0 ? '&' : '?' ) + 'action=woocommerce_tax_rates_save_changes',\n            data: {\n              current_class: data.current_class,\n              wc_tax_nonce: data.wc_tax_nonce,\n              changes: self.changes\n            },\n            success: function( response, textStatus ) {\n              if ( 'success' === textStatus && response.success ) {\n                WCTaxTableModelInstance.set( 'rates', response.data.rates );\n                WCTaxTableModelInstance.trigger( 'change:rates' );\n\n                WCTaxTableModelInstance.changes = {};\n                WCTaxTableModelInstance.trigger( 'saved:rates' );\n\n                // Reload view.\n                WCTaxTableInstance.render();\n              }\n\n              self.unblock();\n            }\n          });\n        }\n      } ),\n      WCTaxTableViewConstructor = Backbone.View.extend({\n        rowTemplate: rowTemplate,\n        per_page: data.limit,\n        page: data.page,\n        initialize: function() {\n          var qty_pages = Math.ceil( _.toArray( this.model.get( 'rates' ) ).length / this.per_page );\n\n          this.qty_pages = 0 === qty_pages ? 1 : qty_pages;\n          this.page = this.sanitizePage( data.page );\n\n          this.listenTo( this.model, 'change:rates', this.setUnloadConfirmation );\n          this.listenTo( this.model, 'saved:rates', this.clearUnloadConfirmation );\n          $tbody.on( 'change autocompletechange', ':input', { view: this }, this.updateModelOnChange );\n          $search_field.on( 'keyup search', { view: this }, this.onSearchField );\n          $pagination.on( 'click', 'a', { view: this }, this.onPageChange );\n          $pagination.on( 'change', 'input', { view: this }, this.onPageChange );\n          $( window ).on( 'beforeunload', { view: this }, this.unloadConfirmation );\n          $submit.on( 'click', { view: this }, this.onSubmit );\n          $save_button.prop( 'disabled', true );\n\n          // Can bind these directly to the buttons, as they won't get overwritten.\n          $table.find( '.insert' ).on( 'click', { view: this }, this.onAddNewRow );\n          $table.find( '.remove_tax_rates' ).on( 'click', { view: this }, this.onDeleteRow );\n          $table.find( '.export' ).on( 'click', { view: this }, this.onExport );\n        },\n        render: function() {\n          var rates       = this.model.getFilteredRates(),\n            qty_rates   = _.size( rates ),\n            qty_pages   = Math.ceil( qty_rates / this.per_page ),\n            first_index = 0 === qty_rates ? 0 : this.per_page * ( this.page - 1 ),\n            last_index  = this.per_page * this.page,\n            paged_rates = _.toArray( rates ).slice( first_index, last_index ),\n            view        = this;\n\n          // Blank out the contents.\n          this.$el.empty();\n\n          if ( paged_rates.length ) {\n            // Populate $tbody with the current page of results.\n            $.each( paged_rates, function( id, rowData ) {\n              view.$el.append( view.rowTemplate( rowData ) );\n            } );\n          } else {\n            view.$el.append( rowTemplateEmpty() );\n          }\n\n          // Initialize autocomplete for countries.\n          this.$el.find( 'td.country input' ).autocomplete({\n            source: data.countries,\n            minLength: 2\n          });\n\n          // Initialize autocomplete for states.\n          this.$el.find( 'td.state input' ).autocomplete({\n            source: data.states,\n            minLength: 3\n          });\n\n          // Postcode and city don't have `name` values by default. They're only created if the contents changes, to save on database queries (I think)\n          this.$el.find( 'td.postcode input, td.city input' ).change( function() {\n            $( this ).attr( 'name', $( this ).data( 'name' ) );\n          });\n\n          if ( qty_pages > 1 ) {\n            // We've now displayed our initial page, time to render the pagination box.\n            $pagination.html( paginationTemplate( {\n              qty_rates:    qty_rates,\n              current_page: this.page,\n              qty_pages:    qty_pages\n            } ) );\n          } else {\n            $pagination.empty();\n            view.page = 1;\n          }\n        },\n        updateUrl: function() {\n          if ( ! window.history.replaceState ) {\n            return;\n          }\n\n          var url    = data.base_url,\n            search = $search_field.val();\n\n          if ( 1 < this.page ) {\n            url += '&p=' + encodeURIComponent( this.page );\n          }\n\n          if ( search.length ) {\n            url += '&s=' + encodeURIComponent( search );\n          }\n\n          window.history.replaceState( {}, '', url );\n        },\n        onSubmit: function( event ) {\n          event.data.view.model.save();\n          event.preventDefault();\n        },\n        onAddNewRow: function( event ) {\n          var view    = event.data.view,\n            model   = view.model,\n            rates   = _.indexBy( model.get( 'rates' ), 'tax_rate_id' ),\n            changes = {},\n            size    = _.size( rates ),\n            newRow  = _.extend( {}, data.default_rate, {\n              tax_rate_id: 'new-' + size + '-' + Date.now(),\n              newRow:      true\n            } ),\n            $current, current_id, current_order, rates_to_reorder, reordered_rates;\n\n          $current = $tbody.children( '.current' );\n\n          if ( $current.length ) {\n            current_id            = $current.last().data( 'id' );\n            current_order         = parseInt( rates[ current_id ].tax_rate_order, 10 );\n            newRow.tax_rate_order = 1 + current_order;\n\n            rates_to_reorder = _.filter( rates, function( rate ) {\n              if ( parseInt( rate.tax_rate_order, 10 ) > current_order ) {\n                return true;\n              }\n              return false;\n            } );\n\n            reordered_rates = _.map( rates_to_reorder, function( rate ) {\n              rate.tax_rate_order++;\n              changes[ rate.tax_rate_id ] = _.extend( changes[ rate.tax_rate_id ] || {}, { tax_rate_order : rate.tax_rate_order } );\n              return rate;\n            } );\n          } else {\n            newRow.tax_rate_order = 1 + _.max(\n              _.pluck( rates, 'tax_rate_order' ),\n              function ( val ) {\n                // Cast them all to integers, because strings compare funky. Sighhh.\n                return parseInt( val, 10 );\n              }\n            );\n            // Move the last page\n            view.page = view.qty_pages;\n          }\n\n          rates[ newRow.tax_rate_id ]   = newRow;\n          changes[ newRow.tax_rate_id ] = newRow;\n\n          model.set( 'rates', rates );\n          model.logChanges( changes );\n\n          view.render();\n        },\n        onDeleteRow: function( event ) {\n          var view    = event.data.view,\n            model   = view.model,\n            rates   = _.indexBy( model.get( 'rates' ), 'tax_rate_id' ),\n            changes = {},\n            $current, current_id;\n\n          event.preventDefault();\n\n          if ( $current = $tbody.children( '.current' ) ) {\n            $current.each(function(){\n              current_id    = $( this ).data('id');\n\n              delete rates[ current_id ];\n\n              changes[ current_id ] = _.extend( changes[ current_id ] || {}, { deleted : 'deleted' } );\n            });\n\n            model.set( 'rates', rates );\n            model.logChanges( changes );\n\n            view.render();\n          } else {\n            window.alert( data.strings.no_rows_selected );\n          }\n        },\n        onSearchField: function( event ){\n          event.data.view.updateUrl();\n          event.data.view.render();\n        },\n        onPageChange: function( event ) {\n          var $target  = $( event.currentTarget );\n\n          event.preventDefault();\n          event.data.view.page = $target.data( 'goto' ) ? $target.data( 'goto' ) : $target.val();\n          event.data.view.render();\n          event.data.view.updateUrl();\n        },\n        onExport: function( event ) {\n          var csv_data = 'data:application/csv;charset=utf-8,' + data.strings.csv_data_cols.join(',') + '\\n';\n\n          $.each( event.data.view.model.getFilteredRates(), function( id, rowData ) {\n            var row = '';\n\n            row += rowData.tax_rate_country  + ',';\n            row += rowData.tax_rate_state    + ',';\n            row += ( rowData.postcode        ? rowData.postcode.join( '; ' ) : '' ) + ',';\n            row += ( rowData.city            ? rowData.city.join( '; ' )     : '' ) + ',';\n            row += rowData.tax_rate          + ',';\n            row += rowData.tax_rate_name     + ',';\n            row += rowData.tax_rate_priority + ',';\n            row += rowData.tax_rate_compound + ',';\n            row += rowData.tax_rate_shipping + ',';\n            row += data.current_class;\n\n            csv_data += row + '\\n';\n          });\n\n          $( this ).attr( 'href', encodeURI( csv_data ) );\n\n          return true;\n        },\n        setUnloadConfirmation: function() {\n          this.needsUnloadConfirm = true;\n          $save_button.prop( 'disabled', false );\n        },\n        clearUnloadConfirmation: function() {\n          this.needsUnloadConfirm = false;\n          $save_button.prop( 'disabled', true );\n        },\n        unloadConfirmation: function( event ) {\n          if ( event.data.view.needsUnloadConfirm ) {\n            event.returnValue = data.strings.unload_confirmation_msg;\n            window.event.returnValue = data.strings.unload_confirmation_msg;\n            return data.strings.unload_confirmation_msg;\n          }\n        },\n        updateModelOnChange: function( event ) {\n          var model     = event.data.view.model,\n            $target   = $( event.target ),\n            id        = $target.closest( 'tr' ).data( 'id' ),\n            attribute = $target.data( 'attribute' ),\n            val       = $target.val();\n\n          if ( 'city' === attribute || 'postcode' === attribute ) {\n            val = val.split( ';' );\n            val = $.map( val, function( thing ) {\n              return thing.trim();\n            });\n          }\n\n          if ( 'tax_rate_compound' === attribute || 'tax_rate_shipping' === attribute ) {\n            if ( $target.is( ':checked' ) ) {\n              val = 1;\n            } else {\n              val = 0;\n            }\n          }\n\n          model.setRateAttribute( id, attribute, val );\n        },\n        sanitizePage: function( page_num ) {\n          page_num = parseInt( page_num, 10 );\n          if ( page_num < 1 ) {\n            page_num = 1;\n          } else if ( page_num > this.qty_pages ) {\n            page_num = this.qty_pages;\n          }\n          return page_num;\n        }\n      } ),\n      WCTaxTableModelInstance = new WCTaxTableModelConstructor({\n        rates: data.rates\n      } ),\n      WCTaxTableInstance = new WCTaxTableViewConstructor({\n        model:    WCTaxTableModelInstance,\n        el:       '#rates'\n      } );\n\n    WCTaxTableInstance.render();\n\n  });\n})( jQuery, htmlSettingsTaxLocalizeScript, wp, ajaxurl );\n\n\n})(jQuery, window.awebooking);\n"],"file":"settings-taxes.js"}