{"version":3,"names":[],"mappings":"","sources":["admin/schedule-calendar.js"],"sourcesContent":["(function($, flatpickr, moment) {\r\n  'use strict';\r\n\r\n  let COLUMN_WIDTH = 60;\r\n  const DATE_FORMAT  = 'YYYY-MM-DD';\r\n\r\n  const Selection = Backbone.Model.extend({\r\n    defaults: {\r\n      endDate: null,\r\n      startDate: null,\r\n      calendar: null,\r\n    },\r\n\r\n    clear() {\r\n      this.clearSelectedDate(null);\r\n    },\r\n\r\n    isValid() {\r\n      if (! this.has('calendar') || this.get('calendar') < 1) {\r\n        return false;\r\n      }\r\n\r\n      return this.getNights() >= 0;\r\n    },\r\n\r\n    clearSelectedDate(calendar) {\r\n      this.set({ startDate: null, endDate: null });\r\n\r\n      this.set('calendar', calendar);\r\n\r\n      this.trigger('clear_dates');\r\n    },\r\n\r\n    getNights() {\r\n      if (! this.has('endDate') || ! this.has('startDate')) {\r\n        return -1;\r\n      }\r\n\r\n      return this.get('endDate').diff(this.get('startDate'), 'days');\r\n    }\r\n  });\r\n\r\n  const ScheduleCalendar = Backbone.View.extend({\r\n    options: {\r\n      debug: false,\r\n      marker: '.scheduler__marker',\r\n      popper: '.scheduler__popper > .scheduler__actions',\r\n      granularity: 'nightly', // 'daily'\r\n    },\r\n\r\n    events: {\r\n      'click      .scheduler__body .scheduler__date': 'setSelectionDate',\r\n      'mouseenter .scheduler__body .scheduler__date': 'drawMarkerOnHover',\r\n    },\r\n\r\n    initialize(options) {\r\n      this.options = _.defaults(options || {}, this.options);\r\n      this.model = new Selection;\r\n\r\n      const testColumnWith = this.$el.find('.scheduler__column').first().outerWidth();\r\n      if (testColumnWith > COLUMN_WIDTH) {\r\n        COLUMN_WIDTH = testColumnWith;\r\n      }\r\n\r\n      // Handle click action before setup popper.\r\n      this.$el.find('.scheduler__actions [data-schedule-action]').on('click', this.handleClickAction.bind(this));\r\n\r\n      this.$marker = this.$el.find(this.options.marker);\r\n      this.$marker.hide();\r\n\r\n      this.setupPopper();\r\n      this.popper = this.$marker[0]._tippy;\r\n\r\n      if (window.Waypoint) {\r\n        this.setupLabelAnimate();\r\n      }\r\n\r\n      $(document).on('keyup', this.onKeyup.bind(this));\r\n      this.listenTo(this.model, 'change:startDate change:endDate', this.setMarkerPosition);\r\n      this.listenTo(this.model, 'clear_dates', this.onClearSelectedDates);\r\n\r\n      if (this.options.debug) {\r\n        this.listenTo(this.model, 'change', this.debug);\r\n      }\r\n\r\n      this.$el.data('scheduler', this);\r\n    },\r\n\r\n    debug () {\r\n      if (this.model.has('startDate') && this.model.has('endDate')) {\r\n        console.log(this.model.get('calendar'), this.model.get('startDate').format(DATE_FORMAT) + ' - ' + this.model.get('endDate').format(DATE_FORMAT));\r\n      } else if (this.model.has('startDate')) {\r\n        console.log(this.model.get('calendar'), this.model.get('startDate').format(DATE_FORMAT) + ' - null');\r\n      } else if(this.model.has('endDate')) {\r\n        console.log(this.model.get('calendar'), 'null' + ' - ' + this.model.get('endDate').format(DATE_FORMAT));\r\n      } else {\r\n        console.log('null - null');\r\n      }\r\n    },\r\n\r\n    onKeyup(e) {\r\n      if (e.keyCode == 27) {\r\n        this.model.clearSelectedDate();\r\n      }\r\n    },\r\n\r\n    handleClickAction: function(e) {\r\n      e.preventDefault();\r\n      const $targetLink = $(e.currentTarget);\r\n\r\n      if (! this.model.isValid()) {\r\n        return false;\r\n      }\r\n\r\n      if (! $targetLink.data('scheduleAction')) {\r\n        return false;\r\n      }\r\n\r\n      this.trigger('action:' + $targetLink.data('scheduleAction'), e, this.model );\r\n    },\r\n\r\n    onClearSelectedDates() {\r\n      this.popper.hide();\r\n\r\n      this.$marker.find('span').text(0);\r\n\r\n      this.trigger('clear');\r\n    },\r\n\r\n    setSelectionDate(e) {\r\n      const $target = $(e.currentTarget);\r\n      const setUnit = this.getUnitByElement($target);\r\n      const clickDate = moment($target.data('date'));\r\n\r\n      if (this.model.has('startDate') && this.model.has('endDate')) {\r\n        this.model.clearSelectedDate(setUnit);\r\n        return;\r\n      }\r\n\r\n      if (this.model.has('calendar') && setUnit !== this.model.get('calendar')\r\n          || this.model.has('startDate') && clickDate.isBefore(this.model.get('startDate'), 'day')) {\r\n        this.model.clearSelectedDate(setUnit);\r\n      }\r\n\r\n      // Set the start date first.\r\n      if (!this.model.has('startDate') && !this.model.has('endDate')) {\r\n        this.model.set('calendar', setUnit);\r\n        this.model.set('startDate', clickDate.clone());\r\n\r\n        this.drawMarkerOnHover(e);\r\n        return;\r\n      }\r\n\r\n      // Require 1 night for granularity by nightly.\r\n      if ('nightly' == this.options.granularity && clickDate.diff(this.model.get('startDate'), 'days') < 1 ) {\r\n        return;\r\n      }\r\n\r\n      this.popper.show();\r\n      this.model.set('endDate', clickDate.clone());\r\n      this.trigger('apply', this.model, this);\r\n    },\r\n\r\n    setMarkerPosition() {\r\n      const endDate = this.model.get('endDate');\r\n      const startDate = this.model.get('startDate');\r\n\r\n      if (_.isNull(startDate) && _.isNull(endDate)) {\r\n        this.$marker.css('width', COLUMN_WIDTH).hide();\r\n        return;\r\n      }\r\n\r\n      const $startDateEl = this.getElementByDate(\r\n        this.model.get('calendar'), startDate\r\n      );\r\n\r\n      if (_.isNull(endDate)) {\r\n        const position = this.getCellPossiton($startDateEl);\r\n        this.$marker.show().css({ top: position.top, left: position.left });\r\n      } else {\r\n        const $endDateEl = this.getElementByDate(this.model.get('calendar'), endDate);\r\n        this.$marker.css('width', ($endDateEl.index() - $startDateEl.index() + 1) * COLUMN_WIDTH);\r\n      }\r\n    },\r\n\r\n    drawMarkerOnHover(e) {\r\n      const $target = $(e.currentTarget);\r\n      const targetUnit = this.getUnitByElement($target);\r\n\r\n      if (!this.model.has('calendar')\r\n        || this.model.get('calendar') !== targetUnit\r\n        || !this.model.has('startDate')\r\n        || this.model.has('startDate') && this.model.has('endDate')) {\r\n        return;\r\n      }\r\n\r\n      const hoverDate = moment($target.data('date'));\r\n      const startDate = this.model.get('startDate');\r\n\r\n      if (startDate.isSameOrBefore(hoverDate, 'day')) {\r\n        const $startDateEl = this.getElementByDate(targetUnit, startDate);\r\n        const days = ($target.index() - $startDateEl.index() + 1);\r\n\r\n        this.$marker.css('width', days * COLUMN_WIDTH);\r\n        this.$marker.find('span').text('daily' == this.options.granularity ? days : days - 1);\r\n      }\r\n    },\r\n\r\n    getElementByDate(calendar, date) {\r\n      if (typeof date === 'object') {\r\n        date = date.format(DATE_FORMAT);\r\n      }\r\n\r\n      return this.$el\r\n        .find('[data-calendar=\"' + calendar + '\"]')\r\n        .find('.scheduler__date[data-date=\"' + date + '\"]');\r\n    },\r\n\r\n    getUnitByElement(element) {\r\n      let calendar = $(element).data('calendar');\r\n\r\n      if (typeof calendar === 'undefined') {\r\n        calendar = $(element).closest('[data-calendar]').data('calendar');\r\n      }\r\n\r\n      calendar = parseInt(calendar, 10);\r\n      return ! isNaN(calendar) ? calendar : 0;\r\n    },\r\n\r\n    getCellPossiton(element) {\r\n      const childPos = element.offset();\r\n      const parentPos = this.$el.find('.scheduler__body').offset();\r\n\r\n      return {\r\n        top: childPos.top - parentPos.top,\r\n        left: childPos.left - parentPos.left\r\n      };\r\n    },\r\n\r\n    /**\r\n     * Setup the Popper.\r\n     *\r\n     * @return {void}\r\n     */\r\n    setupPopper() {\r\n      tippy(this.$marker[0], {\r\n        html: this.$el.find(this.options.popper)[0],\r\n        theme: 'abrs-tippy',\r\n        arrow: true,\r\n        distance: 0,\r\n        trigger: 'manual',\r\n        placement: 'bottom',\r\n        hideOnClick: 'persistent',\r\n        interactive: true,\r\n        performance: true,\r\n        animation: 'shift-away',\r\n        duration: [150, 150],\r\n        popperOptions: { modifiers: {\r\n          hide: { enabled: false },\r\n          preventOverflow: { enabled: false },\r\n        }}\r\n      });\r\n    },\r\n\r\n    /**\r\n     * Setup the label animate scroll.\r\n     *\r\n     * @return {void}\r\n     */\r\n    setupLabelAnimate() {\r\n      const self = this;\r\n      const $mainContext = self.$el.find('.scheduler__main')[0];\r\n\r\n      const onHandler = function(direction) {\r\n        const $mainLabel    = self.$el.find('.scheduler__aside .scheduler__month-label');\r\n        const $currentLabel = $(this.element);\r\n\r\n        if ('right' === direction) {\r\n          $currentLabel.attr('data-prev-text', $mainLabel.text());\r\n          $mainLabel.text($currentLabel.text());\r\n        } else {\r\n          $mainLabel.text($currentLabel.data('prevText'));\r\n          $currentLabel.attr('data-prev-text', '');\r\n        }\r\n      };\r\n\r\n      self.$el.find('.scheduler__month-label').each(function() {\r\n        new Waypoint({\r\n          element: this,\r\n          context: $mainContext,\r\n          offset: -50,\r\n          horizontal: true,\r\n          handler: onHandler,\r\n        });\r\n      });\r\n    }\r\n  });\r\n\r\n  window.ScheduleCalendar = ScheduleCalendar;\r\n\r\n})(jQuery, window.flatpickr, window.moment);\r\n"],"file":"schedule-calendar.js"}