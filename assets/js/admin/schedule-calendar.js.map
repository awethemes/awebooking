{"version":3,"names":[],"mappings":"","sources":["admin/schedule-calendar.js"],"sourcesContent":["(function($, flatpickr, moment) {\n  'use strict';\n\n  let COLUMN_WIDTH = 60;\n  const DATE_FORMAT  = 'YYYY-MM-DD';\n\n  const Selection = Backbone.Model.extend({\n    defaults: {\n      endDate: null,\n      startDate: null,\n      calendar: null,\n    },\n\n    clear() {\n      this.clearSelectedDate(null);\n    },\n\n    isValid() {\n      if (! this.has('calendar') || this.get('calendar') < 1) {\n        return false;\n      }\n\n      return this.getNights() >= 0;\n    },\n\n    clearSelectedDate(calendar) {\n      this.set({ startDate: null, endDate: null });\n\n      this.set('calendar', calendar);\n\n      this.trigger('clear_dates');\n    },\n\n    getNights() {\n      if (! this.has('endDate') || ! this.has('startDate')) {\n        return -1;\n      }\n\n      return this.get('endDate').diff(this.get('startDate'), 'days');\n    }\n  });\n\n  const ScheduleCalendar = Backbone.View.extend({\n    options: {\n      debug: false,\n      marker: '.scheduler__marker',\n      popper: '.scheduler__popper > .scheduler__actions',\n      granularity: 'nightly', // 'daily'\n    },\n\n    events: {\n      'click      .scheduler__body .scheduler__date': 'setSelectionDate',\n      'mouseenter .scheduler__body .scheduler__date': 'drawMarkerOnHover',\n    },\n\n    initialize(options) {\n      this.options = _.defaults(options || {}, this.options);\n      this.model = new Selection;\n\n      const testColumnWith = this.$el.find('.scheduler__column').first().outerWidth();\n      if (testColumnWith > COLUMN_WIDTH) {\n        COLUMN_WIDTH = testColumnWith;\n      }\n\n      // Handle click action before setup popper.\n      this.$el.find('.scheduler__actions [data-schedule-action]').on('click', this.handleClickAction.bind(this));\n\n      this.$marker = this.$el.find(this.options.marker);\n      this.$marker.hide();\n\n      this.setupPopper();\n      this.popper = this.$marker[0]._tippy;\n\n      if (window.Waypoint) {\n        this.setupLabelAnimate();\n      }\n\n      $(document).on('keyup', this.onKeyup.bind(this));\n      this.listenTo(this.model, 'change:startDate change:endDate', this.setMarkerPosition);\n      this.listenTo(this.model, 'clear_dates', this.onClearSelectedDates);\n\n      if (this.options.debug) {\n        this.listenTo(this.model, 'change', this.debug);\n      }\n\n      this.$el.data('scheduler', this);\n    },\n\n    debug () {\n      if (this.model.has('startDate') && this.model.has('endDate')) {\n        console.log(this.model.get('calendar'), this.model.get('startDate').format(DATE_FORMAT) + ' - ' + this.model.get('endDate').format(DATE_FORMAT));\n      } else if (this.model.has('startDate')) {\n        console.log(this.model.get('calendar'), this.model.get('startDate').format(DATE_FORMAT) + ' - null');\n      } else if(this.model.has('endDate')) {\n        console.log(this.model.get('calendar'), 'null' + ' - ' + this.model.get('endDate').format(DATE_FORMAT));\n      } else {\n        console.log('null - null');\n      }\n    },\n\n    onKeyup(e) {\n      if (e.keyCode == 27) {\n        this.model.clearSelectedDate();\n      }\n    },\n\n    handleClickAction: function(e) {\n      e.preventDefault();\n      const $targetLink = $(e.currentTarget);\n\n      if (! this.model.isValid()) {\n        return false;\n      }\n\n      if (! $targetLink.data('scheduleAction')) {\n        return false;\n      }\n\n      this.trigger('action:' + $targetLink.data('scheduleAction'), e, this.model );\n    },\n\n    onClearSelectedDates() {\n      this.popper.hide();\n\n      this.$marker.find('span').text(0);\n\n      this.trigger('clear');\n    },\n\n    setSelectionDate(e) {\n      const $target = $(e.currentTarget);\n      const setUnit = this.getUnitByElement($target);\n      const clickDate = moment($target.data('date'));\n\n      if (this.model.has('startDate') && this.model.has('endDate')) {\n        this.model.clearSelectedDate(setUnit);\n        return;\n      }\n\n      if (this.model.has('calendar') && setUnit !== this.model.get('calendar')\n          || this.model.has('startDate') && clickDate.isBefore(this.model.get('startDate'), 'day')) {\n        this.model.clearSelectedDate(setUnit);\n      }\n\n      // Set the start date first.\n      if (!this.model.has('startDate') && !this.model.has('endDate')) {\n        this.model.set('calendar', setUnit);\n        this.model.set('startDate', clickDate.clone());\n\n        this.drawMarkerOnHover(e);\n        return;\n      }\n\n      // Require 1 night for granularity by nightly.\n      if ('nightly' == this.options.granularity && clickDate.diff(this.model.get('startDate'), 'days') < 1 ) {\n        return;\n      }\n\n      this.popper.show();\n      this.model.set('endDate', clickDate.clone());\n      this.trigger('apply', this.model, this);\n    },\n\n    setMarkerPosition() {\n      const endDate = this.model.get('endDate');\n      const startDate = this.model.get('startDate');\n\n      if (_.isNull(startDate) && _.isNull(endDate)) {\n        this.$marker.css('width', COLUMN_WIDTH).hide();\n        return;\n      }\n\n      const $startDateEl = this.getElementByDate(\n        this.model.get('calendar'), startDate\n      );\n\n      if (_.isNull(endDate)) {\n        const position = this.getCellPossiton($startDateEl);\n        this.$marker.show().css({ top: position.top, left: position.left });\n      } else {\n        const $endDateEl = this.getElementByDate(this.model.get('calendar'), endDate);\n        this.$marker.css('width', ($endDateEl.index() - $startDateEl.index() + 1) * COLUMN_WIDTH);\n      }\n    },\n\n    drawMarkerOnHover(e) {\n      const $target = $(e.currentTarget);\n      const targetUnit = this.getUnitByElement($target);\n\n      if (!this.model.has('calendar')\n        || this.model.get('calendar') !== targetUnit\n        || !this.model.has('startDate')\n        || this.model.has('startDate') && this.model.has('endDate')) {\n        return;\n      }\n\n      const hoverDate = moment($target.data('date'));\n      const startDate = this.model.get('startDate');\n\n      if (startDate.isSameOrBefore(hoverDate, 'day')) {\n        const $startDateEl = this.getElementByDate(targetUnit, startDate);\n        const days = ($target.index() - $startDateEl.index() + 1);\n\n        this.$marker.css('width', days * COLUMN_WIDTH);\n        this.$marker.find('span').text('daily' == this.options.granularity ? days : days - 1);\n      }\n    },\n\n    getElementByDate(calendar, date) {\n      if (typeof date === 'object') {\n        date = date.format(DATE_FORMAT);\n      }\n\n      return this.$el\n        .find('[data-calendar=\"' + calendar + '\"]')\n        .find('.scheduler__date[data-date=\"' + date + '\"]');\n    },\n\n    getUnitByElement(element) {\n      let calendar = $(element).data('calendar');\n\n      if (typeof calendar === 'undefined') {\n        calendar = $(element).closest('[data-calendar]').data('calendar');\n      }\n\n      calendar = parseInt(calendar, 10);\n      return ! isNaN(calendar) ? calendar : 0;\n    },\n\n    getCellPossiton(element) {\n      const childPos = element.offset();\n      const parentPos = this.$el.find('.scheduler__body').offset();\n\n      return {\n        top: childPos.top - parentPos.top,\n        left: childPos.left - parentPos.left\n      };\n    },\n\n    /**\n     * Setup the Popper.\n     *\n     * @return {void}\n     */\n    setupPopper() {\n      tippy(this.$marker[0], {\n        html: this.$el.find(this.options.popper)[0],\n        theme: 'abrs',\n        arrow: true,\n        distance: 0,\n        trigger: 'manual',\n        placement: 'bottom',\n        hideOnClick: 'persistent',\n        interactive: true,\n        performance: true,\n        animation: 'shift-away',\n        duration: [150, 150],\n        popperOptions: { modifiers: {\n          hide: { enabled: false },\n          preventOverflow: { enabled: false },\n        }}\n      });\n    },\n\n    /**\n     * Setup the label animate scroll.\n     *\n     * @return {void}\n     */\n    setupLabelAnimate() {\n      const self = this;\n      const $mainContext = self.$el.find('.scheduler__main')[0];\n\n      const onHandler = function(direction) {\n        const $mainLabel    = self.$el.find('.scheduler__aside .scheduler__month-label');\n        const $currentLabel = $(this.element);\n\n        if ('right' === direction) {\n          $currentLabel.attr('data-prev-text', $mainLabel.text());\n          $mainLabel.text($currentLabel.text());\n        } else {\n          $mainLabel.text($currentLabel.data('prevText'));\n          $currentLabel.attr('data-prev-text', '');\n        }\n      };\n\n      self.$el.find('.scheduler__month-label').each(function() {\n        new Waypoint({\n          element: this,\n          context: $mainContext,\n          offset: -50,\n          horizontal: true,\n          handler: onHandler,\n        });\n      });\n    }\n  });\n\n  window.ScheduleCalendar = ScheduleCalendar;\n\n})(jQuery, window.flatpickr, window.moment);\n"],"file":"schedule-calendar.js"}