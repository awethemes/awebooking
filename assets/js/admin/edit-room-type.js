webpackJsonp([6],{

/***/ 19:
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(20);


/***/ }),

/***/ 20:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var $ = window.jQuery;
var AweBooking = window.TheAweBooking;

var RoomsCreator = {
  el: '#abkng-rooms',
  template: '#awebooking-rooms-manager-template',

  data: {
    rooms: [],
    totalRooms: 0,
    roomTypeTitle: ''
  },

  created: function created() {
    this.rooms = window.ABKNG_ROOMS || [];
    this.totalRooms = this.rooms.length;
    this.roomTypeTitle = $('#title').val();

    if (this.totalRooms == 0) {
      this.totalRooms = 1;
      this.regenerateRooms();
    }
  },

  methods: {
    regenerateRooms: function regenerateRooms() {
      var roomsLength = this.rooms.length;
      var numberOfRooms = parseInt(this.totalRooms, 10);

      // Re-update title.
      this.roomTypeTitle = $('#title').val();

      if (numberOfRooms <= 0) {
        this.totalRooms = 1;
      }

      if (numberOfRooms > roomsLength) {
        for (var i = roomsLength; i < numberOfRooms; i++) {
          this.rooms.push({ id: -1, name: this.roomTypeTitle + ' - ' + (i + 1) });
        }
      } else if (numberOfRooms < roomsLength) {
        if (confirm(AweBooking.trans('ask_reduce_the_rooms'))) {
          for (var i = roomsLength - 1; i >= numberOfRooms; i--) {
            this.rooms.splice(i, 1);
          }
        }
      }
    },

    deleteRoomByIndex: function deleteRoomByIndex(index) {
      if (!confirm(AweBooking.trans('warning'))) {
        return;
      }

      if (this.rooms.length > 1) {
        this.rooms.splice(index, 1);
        this.totalRooms = this.rooms.length;
      }
    }
  }
};

var ExtraServicesCreator = {
  el: '#extra-services',
  template: '#awebooking-manager-service-template',

  data: {
    services: [],
    all_services: [],
    serviceExist: 0,

    newService: {
      name: '',
      value: 0.00,
      operation: 'add',
      type: 'optional'
    },

    showAddNewContent: false
  },

  created: function created() {
    this.defaultService = this.newService;

    this.services = window.ABKNG_CURRENT_SERVICES || [];
    this.all_services = window.ABKNG_ALL_SERVICES || [];
  },

  methods: {
    isPricable: function isPricable() {
      return this.newService.operation == 'increase' || this.newService.operation == 'decrease';
    },
    addNewService: function addNewService() {
      var self = this;

      var data = this.newService;
      data.room_type = $('#post_ID').val();

      wp.ajax.post('add_awebooking_service', data).done(function (service) {
        if (service.id) {
          self.all_services.push(service);
          self.services.push(service);

          self.newService = defaultService;
          self.showAddNewContent = false;
        }
      }).fail(function (error) {
        alert(error.message);
      });
    },

    deleteService: function deleteService(index) {
      this.services.splice(index, 1);
    },

    checkIncludeService: function checkIncludeService(id) {
      var check = _.find(this.services, function (s) {
        return s.id == id;
      });
      return typeof check !== 'undefined';
    },

    addNewServiceExist: function addNewServiceExist() {
      var id = this.serviceExist;
      if (typeof id != "undefined" && id != 0) {
        var service = _.find(this.all_services, function (s) {
          return s.id == id;
        });
        this.services.push(service);
        this.serviceExist = 0;
      }
    },

    checkOperation: function checkOperation(operation, price) {
      switch (operation) {
        case 'add':
          operation = '+ ' + price;
          break;
        case 'add-daily':
          operation = '+ ' + price + '/night';
          break;
        case 'add-person':
          operation = '+ ' + price + '/person';
          break;
        case 'add-person-daily':
          operation = '+ ' + price + '/person/night';
          break;
        case 'increase':
          operation = '+ ' + price + '%';
          break;
        case 'sub':
          operation = '- ' + price;
          break;
        case 'sub-daily':
          operation = '- ' + price + '/night';
          break;
        case 'decrease':
          operation = '- ' + price + '%';
          break;
      }

      return operation;
    },

    buildTitle: function buildTitle(service) {
      return service.name + ' ' + this.checkOperation(service.operation, service.value);
    }
  }
};

$(function () {

  var roomsCreator = new AweBooking.Vue(RoomsCreator);
  var extraServiceCreator = new AweBooking.Vue(ExtraServicesCreator);

  $('#title').on('change', function () {
    var title = $(this).val();

    if (roomsCreator.$data.rooms.length === 1 && roomsCreator.$data.rooms[0].name == ' - 1') {
      roomsCreator.$data.rooms[0].name = title + ' - 1';
    }
  });
});

/***/ })

},[19]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvanNzcmMvYWRtaW4vZWRpdC1yb29tLXR5cGUuanMiXSwibmFtZXMiOlsiJCIsIndpbmRvdyIsImpRdWVyeSIsIkF3ZUJvb2tpbmciLCJUaGVBd2VCb29raW5nIiwiUm9vbXNDcmVhdG9yIiwiZWwiLCJ0ZW1wbGF0ZSIsImRhdGEiLCJyb29tcyIsInRvdGFsUm9vbXMiLCJyb29tVHlwZVRpdGxlIiwiY3JlYXRlZCIsIkFCS05HX1JPT01TIiwibGVuZ3RoIiwidmFsIiwicmVnZW5lcmF0ZVJvb21zIiwibWV0aG9kcyIsInJvb21zTGVuZ3RoIiwibnVtYmVyT2ZSb29tcyIsInBhcnNlSW50IiwiaSIsInB1c2giLCJpZCIsIm5hbWUiLCJjb25maXJtIiwidHJhbnMiLCJzcGxpY2UiLCJkZWxldGVSb29tQnlJbmRleCIsImluZGV4IiwiRXh0cmFTZXJ2aWNlc0NyZWF0b3IiLCJzZXJ2aWNlcyIsImFsbF9zZXJ2aWNlcyIsInNlcnZpY2VFeGlzdCIsIm5ld1NlcnZpY2UiLCJ2YWx1ZSIsIm9wZXJhdGlvbiIsInR5cGUiLCJzaG93QWRkTmV3Q29udGVudCIsImRlZmF1bHRTZXJ2aWNlIiwiQUJLTkdfQ1VSUkVOVF9TRVJWSUNFUyIsIkFCS05HX0FMTF9TRVJWSUNFUyIsImlzUHJpY2FibGUiLCJhZGROZXdTZXJ2aWNlIiwic2VsZiIsInJvb21fdHlwZSIsIndwIiwiYWpheCIsInBvc3QiLCJkb25lIiwic2VydmljZSIsImZhaWwiLCJlcnJvciIsImFsZXJ0IiwibWVzc2FnZSIsImRlbGV0ZVNlcnZpY2UiLCJjaGVja0luY2x1ZGVTZXJ2aWNlIiwiY2hlY2siLCJfIiwiZmluZCIsInMiLCJhZGROZXdTZXJ2aWNlRXhpc3QiLCJjaGVja09wZXJhdGlvbiIsInByaWNlIiwiYnVpbGRUaXRsZSIsInJvb21zQ3JlYXRvciIsIlZ1ZSIsImV4dHJhU2VydmljZUNyZWF0b3IiLCJvbiIsInRpdGxlIiwiJGRhdGEiXSwibWFwcGluZ3MiOiI7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QUEyQkEsYUFBTzNCLFNBQVA7QUFDRCxLQXhFTTs7QUEwRVA0QixnQkFBWSxvQkFBVWQsT0FBVixFQUFvQjtBQUM5QixhQUFPQSxRQUFRMUIsSUFBUixHQUFlLEdBQWYsR0FBcUIsS0FBS3NDLGNBQUwsQ0FBb0JaLFFBQVFkLFNBQTVCLEVBQXVDYyxRQUFRZixLQUEvQyxDQUE1QjtBQUNEO0FBNUVNO0FBMUJrQixDQUE3Qjs7QUEwR0FuQyxFQUFFLFlBQVc7O0FBRVgsTUFBTWlFLGVBQWUsSUFBSTlELFdBQVcrRCxHQUFmLENBQW1CN0QsWUFBbkIsQ0FBckI7QUFDQSxNQUFNOEQsc0JBQXNCLElBQUloRSxXQUFXK0QsR0FBZixDQUFtQnBDLG9CQUFuQixDQUE1Qjs7QUFFQTlCLElBQUUsUUFBRixFQUFZb0UsRUFBWixDQUFlLFFBQWYsRUFBeUIsWUFBVztBQUNsQyxRQUFJQyxRQUFRckUsRUFBRSxJQUFGLEVBQVFlLEdBQVIsRUFBWjs7QUFFQSxRQUFJa0QsYUFBYUssS0FBYixDQUFtQjdELEtBQW5CLENBQXlCSyxNQUF6QixLQUFvQyxDQUFwQyxJQUF5Q21ELGFBQWFLLEtBQWIsQ0FBbUI3RCxLQUFuQixDQUF5QixDQUF6QixFQUE0QmUsSUFBNUIsSUFBb0MsTUFBakYsRUFBeUY7QUFDdkZ5QyxtQkFBYUssS0FBYixDQUFtQjdELEtBQW5CLENBQXlCLENBQXpCLEVBQTRCZSxJQUE1QixHQUFtQzZDLFFBQVEsTUFBM0M7QUFDRDtBQUNGLEdBTkQ7QUFRRCxDQWJELEUiLCJmaWxlIjoiXFxqc1xcYWRtaW5cXGVkaXQtcm9vbS10eXBlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xyXG5cclxuY29uc3QgJCA9IHdpbmRvdy5qUXVlcnk7XHJcbmNvbnN0IEF3ZUJvb2tpbmcgPSB3aW5kb3cuVGhlQXdlQm9va2luZztcclxuXHJcbmNvbnN0IFJvb21zQ3JlYXRvciA9IHtcclxuICBlbDogJyNhYmtuZy1yb29tcycsXHJcbiAgdGVtcGxhdGU6ICcjYXdlYm9va2luZy1yb29tcy1tYW5hZ2VyLXRlbXBsYXRlJyxcclxuXHJcbiAgZGF0YToge1xyXG4gICAgcm9vbXM6IFtdLFxyXG4gICAgdG90YWxSb29tczogMCxcclxuICAgIHJvb21UeXBlVGl0bGU6ICcnLFxyXG4gIH0sXHJcblxyXG4gIGNyZWF0ZWQ6IGZ1bmN0aW9uKCkge1xyXG4gICAgdGhpcy5yb29tcyA9IHdpbmRvdy5BQktOR19ST09NUyB8fCBbXTtcclxuICAgIHRoaXMudG90YWxSb29tcyA9IHRoaXMucm9vbXMubGVuZ3RoO1xyXG4gICAgdGhpcy5yb29tVHlwZVRpdGxlID0gJCgnI3RpdGxlJykudmFsKCk7XHJcblxyXG4gICAgaWYgKHRoaXMudG90YWxSb29tcyA9PSAwKSB7XHJcbiAgICAgIHRoaXMudG90YWxSb29tcyA9IDE7XHJcbiAgICAgIHRoaXMucmVnZW5lcmF0ZVJvb21zKCk7XHJcbiAgICB9XHJcbiAgfSxcclxuXHJcbiAgbWV0aG9kczoge1xyXG4gICAgcmVnZW5lcmF0ZVJvb21zOiBmdW5jdGlvbigpIHtcclxuICAgICAgdmFyIHJvb21zTGVuZ3RoID0gdGhpcy5yb29tcy5sZW5ndGg7XHJcbiAgICAgIHZhciBudW1iZXJPZlJvb21zID0gcGFyc2VJbnQodGhpcy50b3RhbFJvb21zLCAxMCk7XHJcblxyXG4gICAgICAvLyBSZS11cGRhdGUgdGl0bGUuXHJcbiAgICAgIHRoaXMucm9vbVR5cGVUaXRsZSA9ICQoJyN0aXRsZScpLnZhbCgpO1xyXG5cclxuICAgICAgaWYgKG51bWJlck9mUm9vbXMgPD0gMCkge1xyXG4gICAgICAgIHRoaXMudG90YWxSb29tcyA9IDE7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChudW1iZXJPZlJvb21zID4gcm9vbXNMZW5ndGgpIHtcclxuICAgICAgICBmb3IgKHZhciBpID0gcm9vbXNMZW5ndGg7IGkgPCBudW1iZXJPZlJvb21zOyBpKyspIHtcclxuICAgICAgICAgIHRoaXMucm9vbXMucHVzaCh7IGlkOiAtMSwgbmFtZTogdGhpcy5yb29tVHlwZVRpdGxlICsgJyAtICcgKyAgKGkrMSkgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2UgaWYgKG51bWJlck9mUm9vbXMgPCByb29tc0xlbmd0aCkge1xyXG4gICAgICAgIGlmIChjb25maXJtKEF3ZUJvb2tpbmcudHJhbnMoJ2Fza19yZWR1Y2VfdGhlX3Jvb21zJykpKSB7XHJcbiAgICAgICAgICBmb3IgKHZhciBpID0gcm9vbXNMZW5ndGggLSAxOyBpID49IG51bWJlck9mUm9vbXM7IGktLSkge1xyXG4gICAgICAgICAgICB0aGlzLnJvb21zLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgZGVsZXRlUm9vbUJ5SW5kZXg6IGZ1bmN0aW9uKGluZGV4KSB7XHJcbiAgICAgIGlmICghIGNvbmZpcm0oQXdlQm9va2luZy50cmFucygnd2FybmluZycpKSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHRoaXMucm9vbXMubGVuZ3RoID4gMSkge1xyXG4gICAgICAgIHRoaXMucm9vbXMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICB0aGlzLnRvdGFsUm9vbXMgPSB0aGlzLnJvb21zLmxlbmd0aDtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH0sXHJcbn07XHJcblxyXG5jb25zdCBFeHRyYVNlcnZpY2VzQ3JlYXRvciA9IHtcclxuICBlbDogJyNleHRyYS1zZXJ2aWNlcycsXHJcbiAgdGVtcGxhdGU6ICcjYXdlYm9va2luZy1tYW5hZ2VyLXNlcnZpY2UtdGVtcGxhdGUnLFxyXG5cclxuICBkYXRhOiB7XHJcbiAgICBzZXJ2aWNlczogW10sXHJcbiAgICBhbGxfc2VydmljZXM6IFtdLFxyXG4gICAgc2VydmljZUV4aXN0OiAwLFxyXG5cclxuICAgIG5ld1NlcnZpY2U6IHtcclxuICAgICAgbmFtZTogJycsXHJcbiAgICAgIHZhbHVlOiAwLjAwLFxyXG4gICAgICBvcGVyYXRpb246ICdhZGQnLFxyXG4gICAgICB0eXBlOiAnb3B0aW9uYWwnLFxyXG4gICAgfSxcclxuXHJcbiAgICBzaG93QWRkTmV3Q29udGVudDogZmFsc2UsXHJcbiAgfSxcclxuXHJcbiAgY3JlYXRlZDogZnVuY3Rpb24oKSB7XHJcbiAgICB0aGlzLmRlZmF1bHRTZXJ2aWNlID0gdGhpcy5uZXdTZXJ2aWNlO1xyXG5cclxuICAgIHRoaXMuc2VydmljZXMgPSB3aW5kb3cuQUJLTkdfQ1VSUkVOVF9TRVJWSUNFUyB8fCBbXTtcclxuICAgIHRoaXMuYWxsX3NlcnZpY2VzID0gd2luZG93LkFCS05HX0FMTF9TRVJWSUNFUyB8fCBbXTtcclxuICB9LFxyXG5cclxuICBtZXRob2RzOiB7XHJcbiAgICBpc1ByaWNhYmxlOiBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIHRoaXMubmV3U2VydmljZS5vcGVyYXRpb24gPT0gJ2luY3JlYXNlJyB8fCB0aGlzLm5ld1NlcnZpY2Uub3BlcmF0aW9uID09ICdkZWNyZWFzZSc7XHJcbiAgICB9LFxyXG4gICAgYWRkTmV3U2VydmljZTogZnVuY3Rpb24oKSB7XHJcbiAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xyXG5cclxuICAgICAgY29uc3QgZGF0YSA9IHRoaXMubmV3U2VydmljZTtcclxuICAgICAgZGF0YS5yb29tX3R5cGUgPSAkKCcjcG9zdF9JRCcpLnZhbCgpO1xyXG5cclxuICAgICAgd3AuYWpheC5wb3N0KCdhZGRfYXdlYm9va2luZ19zZXJ2aWNlJywgZGF0YSlcclxuICAgICAgICAuZG9uZShmdW5jdGlvbihzZXJ2aWNlKSB7XHJcbiAgICAgICAgICBpZiAoc2VydmljZS5pZCkge1xyXG4gICAgICAgICAgICBzZWxmLmFsbF9zZXJ2aWNlcy5wdXNoKHNlcnZpY2UpO1xyXG4gICAgICAgICAgICBzZWxmLnNlcnZpY2VzLnB1c2goc2VydmljZSk7XHJcblxyXG4gICAgICAgICAgICBzZWxmLm5ld1NlcnZpY2UgPSBkZWZhdWx0U2VydmljZTtcclxuICAgICAgICAgICAgc2VsZi5zaG93QWRkTmV3Q29udGVudCA9IGZhbHNlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLmZhaWwoZnVuY3Rpb24oZXJyb3IpIHtcclxuICAgICAgICAgIGFsZXJ0KGVycm9yLm1lc3NhZ2UpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcbiAgICBkZWxldGVTZXJ2aWNlOiBmdW5jdGlvbihpbmRleCkge1xyXG4gICAgICB0aGlzLnNlcnZpY2VzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICB9LFxyXG5cclxuICAgIGNoZWNrSW5jbHVkZVNlcnZpY2U6IGZ1bmN0aW9uKGlkKSB7XHJcbiAgICAgIHZhciBjaGVjayA9IF8uZmluZCh0aGlzLnNlcnZpY2VzLCBmdW5jdGlvbiAocykgeyByZXR1cm4gcy5pZCA9PSBpZDsgfSk7XHJcbiAgICAgIHJldHVybiAodHlwZW9mIGNoZWNrICE9PSAndW5kZWZpbmVkJyk7XHJcbiAgICB9LFxyXG5cclxuICAgIGFkZE5ld1NlcnZpY2VFeGlzdDogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZhciBpZCA9IHRoaXMuc2VydmljZUV4aXN0O1xyXG4gICAgICBpZiAoKHR5cGVvZihpZCkgIT0gXCJ1bmRlZmluZWRcIikgJiYgKGlkICE9IDApKSB7XHJcbiAgICAgICAgdmFyIHNlcnZpY2UgPSBfLmZpbmQodGhpcy5hbGxfc2VydmljZXMsIGZ1bmN0aW9uIChzKSB7IHJldHVybiBzLmlkID09IGlkOyB9KTtcclxuICAgICAgICB0aGlzLnNlcnZpY2VzLnB1c2goc2VydmljZSk7XHJcbiAgICAgICAgdGhpcy5zZXJ2aWNlRXhpc3QgPSAwO1xyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIGNoZWNrT3BlcmF0aW9uOiBmdW5jdGlvbihvcGVyYXRpb24sIHByaWNlKSB7XHJcbiAgICAgIHN3aXRjaCAob3BlcmF0aW9uKSB7XHJcbiAgICAgICAgICBjYXNlICdhZGQnOlxyXG4gICAgICAgICAgICBvcGVyYXRpb24gPSAnKyAnICsgcHJpY2U7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgY2FzZSAnYWRkLWRhaWx5JzpcclxuICAgICAgICAgICAgb3BlcmF0aW9uID0gJysgJyArIHByaWNlICsgJy9uaWdodCc7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgY2FzZSAnYWRkLXBlcnNvbic6XHJcbiAgICAgICAgICAgIG9wZXJhdGlvbiA9ICcrICcgKyBwcmljZSArICcvcGVyc29uJztcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICBjYXNlICdhZGQtcGVyc29uLWRhaWx5JzpcclxuICAgICAgICAgICAgb3BlcmF0aW9uID0gJysgJyArIHByaWNlICsgJy9wZXJzb24vbmlnaHQnO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIGNhc2UgJ2luY3JlYXNlJzpcclxuICAgICAgICAgICAgb3BlcmF0aW9uID0gJysgJyArIHByaWNlICsgJyUnO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIGNhc2UgJ3N1Yic6XHJcbiAgICAgICAgICAgIG9wZXJhdGlvbiA9ICctICcgKyBwcmljZTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICBjYXNlICdzdWItZGFpbHknOlxyXG4gICAgICAgICAgICBvcGVyYXRpb24gPSAnLSAnICsgcHJpY2UgKyAnL25pZ2h0JztcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICBjYXNlICdkZWNyZWFzZSc6XHJcbiAgICAgICAgICAgIG9wZXJhdGlvbiA9ICctICcgKyBwcmljZSArICclJztcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBvcGVyYXRpb247XHJcbiAgICB9LFxyXG5cclxuICAgIGJ1aWxkVGl0bGU6IGZ1bmN0aW9uKCBzZXJ2aWNlICkge1xyXG4gICAgICByZXR1cm4gc2VydmljZS5uYW1lICsgJyAnICsgdGhpcy5jaGVja09wZXJhdGlvbihzZXJ2aWNlLm9wZXJhdGlvbiwgc2VydmljZS52YWx1ZSk7XHJcbiAgICB9LFxyXG4gIH1cclxufTtcclxuXHJcbiQoZnVuY3Rpb24oKSB7XHJcblxyXG4gIGNvbnN0IHJvb21zQ3JlYXRvciA9IG5ldyBBd2VCb29raW5nLlZ1ZShSb29tc0NyZWF0b3IpO1xyXG4gIGNvbnN0IGV4dHJhU2VydmljZUNyZWF0b3IgPSBuZXcgQXdlQm9va2luZy5WdWUoRXh0cmFTZXJ2aWNlc0NyZWF0b3IpO1xyXG5cclxuICAkKCcjdGl0bGUnKS5vbignY2hhbmdlJywgZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgdGl0bGUgPSAkKHRoaXMpLnZhbCgpO1xyXG5cclxuICAgIGlmIChyb29tc0NyZWF0b3IuJGRhdGEucm9vbXMubGVuZ3RoID09PSAxICYmIHJvb21zQ3JlYXRvci4kZGF0YS5yb29tc1swXS5uYW1lID09ICcgLSAxJykge1xyXG4gICAgICByb29tc0NyZWF0b3IuJGRhdGEucm9vbXNbMF0ubmFtZSA9IHRpdGxlICsgJyAtIDEnO1xyXG4gICAgfVxyXG4gIH0pO1xyXG5cclxufSk7XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Fzc2V0cy9qc3NyYy9hZG1pbi9lZGl0LXJvb20tdHlwZS5qcyJdLCJzb3VyY2VSb290IjoiIn0=